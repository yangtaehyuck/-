
// 익명 함수 => 변수와 같아서 무조건 위에서 아래로 읽어지면서 함수가 만들어진다
// const 함수 = function () {
// }

// let 함수 = function () {
//   console.log('A 함수입니다.')
// }

// 함수 = function () {
//   console.log('B 함수입니다.')
// }

// 함수 = function () {
//   console.log('C 함수입니다.')
// }

// 함수() // => 실행하면 위에서 아래로 실행되기 때문에 'C 함수입니다.'가 출력됨




// 선언적 함수 => 전체 코드를 읽기 전에(실행되기 전에) 선언한 순서대로 만들어진다. 마지막에 선언한 'C 함수입니다.'가 출력됨
// function 함수() {
// }
함수() // 'C 함수입니다.'가 출력됨 => 실행되기 전에 이미 만들어져 있어서 이렇게 사용할 수 있음

function 함수() {
  console.log('A 함수입니다.')
}

function 함수() {
  console.log('B 함수입니다.')
}

function 함수() {
  console.log('C 함수입니다.')
}

함수() // 'C 함수입니다.'가 출력됨


// 익명함수와 선언적 함수의 차이
// 이처럼 익명함수와 선언적 함수가 섞여서 쓰이게 되면 결과를 예측하기 힘들어지므로 익명 함수를 잘 안쓰고 선언적 함수를 쓴다

함수() // '선언적 함수입니다.'가 출력됨

함수 = function () { // 변수이기 때문에 코드가 실행되고 위에서 아래로 차례로 만들어짐
  console.log('익명 함수입니다.')
}

function 함수() {    // 전체 코드가 실행 되기전에 이미 만들어짐
  console.log('선언적 함수입니다.')
}

함수() // '익명 함수입니다.'가 출력됨