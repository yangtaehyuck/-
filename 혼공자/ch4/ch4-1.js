// # 배열 → 여러 개의 값을 모아놓은 것
// ## 생성 방법
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ← [요소, 요소, 요소, ...] → element(요소)라고 한다
// const a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] → 변수나 상수에 넣을 수 있음
// a.length → 10
// a[5] → 5 
// a[1 + 2] → a[3] → 3 처럼 배열안에 인덱스를 만들 수 있음
// ['여러가지', 10, true, 1] → 이렇게 만들 수 있음


// # 배열 메서드
// ## 배열 뒤에 요소 추가하기: push(요소)
// const a = [52, 273, '안녕', '하세요']
// a.push(100) 
// → [52, 273, '안녕', '하세요', 100] 이렇게 맨뒤에 추가가됨
// ## 배열 중간에 요소 추가하기: splice(인덱스, 0, 요소)
// → a.splice(1, 0, '추가') 1번 인덱스 위치에 '추가'를 넣는다
// → [52, "추가",273, "안녕", "하세요", 100]


// ## 인덱스로 배열의 요소 제거하기: splice(인덱스, 1)
// a.splice(0, 1) → 배열의 0번째 52를 제거
// → ["추가",273, "안녕", "하세요", 100]가 출력됨


// ## 배열 내부에서 값의 위치 찾기: indexOf(요소)
// a.indexOf('안녕') → 배열안에서 '안녕'을 찾아서 몇 번째에 있는지 출력해줌
// → 2
// a.indexOf('하이') → 이렇게 배열안에 없는 인덱스는
// → -1 로 출력됨


// ## 값으로 배열의 요소 제거하기: indexOf() + splice() 활용
// const index = a.indexOf('하세요') '하세요'의 위치인 3을 index에 할당하게 되고
// a.splice(index, 1) 인덱스 3을 splice로 제거하면 
// → ["추가",273, "안녕", 100] 가 출력됨


// # 스택과 힙

// 저장을 할 때 사용하는 공간
// 스택(stack): 스택스택 쌓는 공간[잘 쌓는 공간]
// → 기본 자료형은 직접 넣어짐(숫자, 문자열, 불)
// → 복합 자료형은 그 주소가 넣어짐 ex) #1 이렇게 힙의 주소가 들어감

// 힙(heap): 힙힙 던져서 쌓는 공간[대충 큰 것들을 던져서 쌓는 공간]
// → 복합 자료형의 본체가 저장됨(배열, 객체, 함수)

// # 파괴적 처리 && 비파괴적 처리
// 원본이 변경됨 → 파괴적 처리
// 원본이 변경되지 않음 → 비파괴적 처리

// # const의 제한
// const → 스택에 있는 값 변경 X
// → 힙에 있는 복합 자료형은 바꿀 수 있음 (배열 같은것은 힙에 저장되기때문에 바뀌어도 상관없음) 어짜피 스택에는 힙의 주소가 있기때문

// const a = [1, 2]
// → a = [2, 3] 이렇게 변경은 불가능 하지만
// const a = 10
// → a = 20 이런거 변경 안됨
//  a.push(3, 4) 이렇게 힙에서 조작하는 것만 가능